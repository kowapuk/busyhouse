import bme280import ssd1306from machine import Pin, RTC, PWM, I2Cfrom neopixel import NeoPixelfrom utime import sleep_ms# GPIO5 - yellow, GPIO4 - blue, GPIO0 - green, GPIO2 - red# GPIO14 - np scl = Pin(13)sda = Pin(0)led     = const(14)yellow  = const(5)blue    = const(4)red     = const(2)green   = const(12)SET_COM_OUT_DIR  = const(0xc0)SET_SEG_REMAP    = const(0xa0)class House():    def __init__(self):    self.timer = RTC()    self.np = NeoPixel(Pin(led), 25)    self.i2c = I2C(scl=scl, sda=sda, freq=100000)    self.init_device()    self.yel_but = Pin(yellow, Pin.IN)    self.blu_but = Pin(blue, Pin.IN)    self.red_but = Pin(red, Pin.IN)    self.gre_but = Pin(green, Pin.IN)    self.beep = Pin(15, Pin.OUT)    self.beep_play = PWM(self.beep)    self.raw = 24    self.col = 0    # время, в течени    self.time_to_action = 6    self.fill_field = [0] * 25    self.speed = 5  def init_device(self):    self.oled = ssd1306.SSD1306_I2C(128, 64, self.i2c)    if self.oled:      self.oled.write_cmd(SET_COM_OUT_DIR)             # mirror vertically      self.oled.write_cmd(SET_SEG_REMAP)               # mirror horizontally (64 rows)\    else:      pass    self.bme = bme280.BME280(i2c=self.i2c)    print('Devices ok')  def leds_on(self, color):    self.np.fill(color)    self.np.write()  def led_on(self, pos, color):    self.np[pos] = color    self.np.write()  def beep_off(self):    self.beep_play.freq(0)    self.beep_play.duty(0)  def run_up(self, color):    if self.fill_field.count(0) == 0:        self.fill_field = [0] * 25        self.np.fill((0,0,0))        self.np.write()    count = 0    for each in range(self.fill_field.count(0)):        if count == 0:            self.fill_field[each] = color            self.led_on(each, color)        else:            self.fill_field[each-1] = 0            self.led_on(each-1, (0, 0, 0))            self.fill_field[each] = color            self.led_on(each, color)        sleep_ms(100)        count += 1    self.beep_off()  def check_but(self, but):    if but.value():      return True    else:       return False  def clear_field(self, s_raws, f_raws, s_cols, f_cols):    for raw in range(s_raws, f_raws):      for col in range(s_cols, f_cols):        self.oled.hline(raw, col, 128, 0)    self.oled.show()  def show_bme(self):    val = self.bme.values    t = "T:{}".format(val[0])    p = "P:{}".format(val[1])    h = "H:{}".format(val[2])    # Clear     self.clear_field(0, 1, 0, 24)    self.oled.text(t, 0, 0)    self.oled.text(p, 0, 8)    self.oled.text(h, 0, 16)    self.oled.show()    def but_event(self, but, color, name):      count = 0       while self.check_but(but):        count += 1        sleep_ms(200)      if count >=10:        self.leds_on(color)        self.oled.text(name + ' All', self.col, self.raw)        self.raw += 8      else:        # print('Blue')        # self.beep_play.freq(0)        # self.beep_play.duty(512)        # self.led_on((0, 0, 20))        self.run_up(color=color)        self.oled.text(name, self.col, self.raw)        self.raw += 8  def run(self):    print('Run')    print('During work to 10 cycles')    self.timer.alarm(0, self.time_to_action*5000)    self.show_bme()    while self.timer.alarm_left() > 0:      if self.check_but(self.blu_but):        self.but_event(self.blu_but, (0, 0, 20), 'Blue')      elif self.check_but(self.gre_but):        self.but_event(self.gre_but, (0, 20, 0), 'Green')        # self.beep_play.freq(2)        # self.beep_play.duty(512)        # # self.led_on((0, 20, 0))        # self.run_up(color=(0, 20, 0))      elif self.check_but(self.red_but):        self.but_event(self.red_but, (20, 0, 0), 'Red')        # print('Red')        # self.beep_play.freq(4)        # self.beep_play.duty(512)        # # self.led_on((20, 0, 0))        # self.run_up(color=(20, 0, 0))      elif self.yel_but.value():        self.but_event(self.yel_but, (20, 20, 0), 'Yellow')        # self.beep_play.freq(8)        # self.beep_play.duty(512)        # # self.led_on((20, 20, 0))        # self.run_up(color=(20, 20, 0))      if self.raw >= 64:        self.clear_field(0, 1, 24, 65)        self.raw = 24      self.oled.show()    # self.np.fill((0,0,0))    # self.np.write()        # Start dev = House()while True:  print('Working')  dev.run()